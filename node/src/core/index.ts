import MLXArray, {
  array,
  zeros,
  zeros_like,
  ones,
  ones_like,
  full,
  type ArrayElement,
} from './array';
import dtypeModule, {
  Dtype,
  fromString as dtypeFromString,
  keys as dtypeKeys,
  values as dtypeValues,
  items as dtypeItems,
  dir as dtypeDir,
  has as dtypeHas,
  get as dtypeGet,
  issubdtype as dtypeIssubdtype,
  categoryKeys as dtypeCategoryKeys,
  categoryValues as dtypeCategoryValues,
  categoryItems as dtypeCategoryItems,
  bool,
  int8,
  int16,
  int32,
  int64,
  uint8,
  uint16,
  uint32,
  uint64,
  float16,
  bfloat16,
  float32,
  float64,
  complex64,
  complexfloating,
  floating,
  inexact,
  signedinteger,
  unsignedinteger,
  integer,
  number,
  generic,
  type MLXDtype,
  type DTypeKey,
  type DTypeCategory,
  type DTypeCategoryKey,
  type DTypeLike,
} from './dtype';
import * as deviceModule from './device';
import {
  MLXStream,
  defaultStream,
  newStream,
  setDefaultStream,
  synchronize,
  streamContext,
  withStream,
  type StreamLike,
} from './stream';
import {
  reshape,
  transpose,
  moveaxis,
  swapaxes,
  add,
  multiply,
  where,
  type ReshapeOptions,
  type TransposeOptions,
  type MoveAxisOptions,
  type SwapAxesOptions,
  type BinaryOpOptions,
  type WhereOptions,
} from './ops';

export type {
  ArrayElement,
  DTypeKey,
  DTypeCategoryKey,
  DTypeCategory,
  DTypeLike,
  MLXDtype,
};
export type { Device, DeviceLike } from './device';
export type { StreamLike } from './stream';
export type {
  ReshapeOptions,
  TransposeOptions,
  MoveAxisOptions,
  SwapAxesOptions,
  BinaryOpOptions,
  WhereOptions,
} from './ops';
export { MLXArray, MLXArray as Array, array };
export { zeros, zeros_like, ones, ones_like, full };
export { deviceModule as device };
export {
  MLXStream as Stream,
  defaultStream,
  newStream,
  setDefaultStream,
  synchronize,
  streamContext,
  streamContext as stream,
  withStream,
};
export { reshape, transpose, moveaxis, swapaxes, add, multiply, where };
export {
  dtypeModule as dtype,
  Dtype,
  dtypeFromString,
  dtypeKeys,
  dtypeValues,
  dtypeItems,
  dtypeDir,
  dtypeHas,
  dtypeGet,
  dtypeCategoryKeys,
  dtypeCategoryValues,
  dtypeCategoryItems,
  dtypeIssubdtype as issubdtype,
  bool,
  int8,
  int16,
  int32,
  int64,
  uint8,
  uint16,
  uint32,
  uint64,
  float16,
  bfloat16,
  float32,
  float64,
  complex64,
  complexfloating,
  floating,
  inexact,
  signedinteger,
  unsignedinteger,
  integer,
  number,
  generic,
};

const core = {
  array,
  zeros,
  zeros_like,
  ones,
  ones_like,
  full,
  Array: MLXArray,
  Stream: MLXStream,
  defaultStream,
  newStream,
  setDefaultStream,
  synchronize,
  streamContext,
  stream: streamContext,
  withStream,
  reshape,
  transpose,
  moveaxis,
  swapaxes,
  add,
  multiply,
  where,
  device: deviceModule,
  Dtype,
  dtype: dtypeModule,
  dtypeFromString,
  dtypeKeys,
  dtypeValues,
  dtypeItems,
  dtypeDir,
  dtypeHas,
  dtypeGet,
  dtypeCategoryKeys,
  dtypeCategoryValues,
  dtypeCategoryItems,
  issubdtype: dtypeIssubdtype,
  bool,
  int8,
  int16,
  int32,
  int64,
  uint8,
  uint16,
  uint32,
  uint64,
  float16,
  bfloat16,
  float32,
  float64,
  complex64,
  complexfloating,
  floating,
  inexact,
  signedinteger,
  unsignedinteger,
  integer,
  number,
  generic,
};

export default core;
