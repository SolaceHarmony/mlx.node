import * as utils from './utils';
import * as core from './core';
import * as streaming from './streaming';
import * as react from './react';
export declare const native: {
    hello: () => string;
};
export { core, utils, streaming, react };
export declare const array: typeof core.array;
export declare const Array: typeof core.MLXArray;
export declare const Stream: typeof core.Stream;
export declare const issubdtype: (a: core.DTypeLike, b: core.DTypeLike) => boolean;
export declare const zeros: typeof core.zeros;
export declare const zeros_like: typeof core.zeros_like;
export declare const ones: typeof core.ones;
export declare const ones_like: typeof core.ones_like;
export declare const full: typeof core.full;
export declare const defaultStream: typeof core.defaultStream;
export declare const newStream: typeof core.newStream;
export declare const setDefaultStream: typeof core.setDefaultStream;
export declare const synchronize: typeof core.synchronize;
export declare const streamContext: typeof core.streamContext;
export declare const stream: typeof core.streamContext;
export declare const withStream: typeof core.withStream;
export declare const device: typeof core.device;
export declare const reshape: typeof core.reshape;
export declare const transpose: typeof core.transpose;
export declare const moveaxis: typeof core.moveaxis;
export declare const swapaxes: typeof core.swapaxes;
export declare const add: typeof core.add;
export declare const multiply: typeof core.multiply;
export declare const where: typeof core.where;
declare const _default: {
    native: {
        hello: () => string;
    };
    core: typeof core;
    utils: typeof utils;
    react: typeof react;
    streaming: typeof streaming;
    device: typeof core.device;
    array: typeof core.array;
    Array: typeof core.MLXArray;
    issubdtype: (a: core.DTypeLike, b: core.DTypeLike) => boolean;
    zeros: typeof core.zeros;
    zeros_like: typeof core.zeros_like;
    ones: typeof core.ones;
    ones_like: typeof core.ones_like;
    full: typeof core.full;
    Stream: typeof core.Stream;
    defaultStream: typeof core.defaultStream;
    newStream: typeof core.newStream;
    setDefaultStream: typeof core.setDefaultStream;
    synchronize: typeof core.synchronize;
    streamContext: typeof core.streamContext;
    stream: typeof core.streamContext;
    withStream: typeof core.withStream;
    reshape: typeof core.reshape;
    transpose: typeof core.transpose;
    moveaxis: typeof core.moveaxis;
    swapaxes: typeof core.swapaxes;
    add: typeof core.add;
    multiply: typeof core.multiply;
    where: typeof core.where;
};
export default _default;
